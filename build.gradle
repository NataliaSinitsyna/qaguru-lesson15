plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
}

repositories {
    mavenCentral()
}

def allureVersion = "2.23.0",
    slf4jVersion = "1.7.32"

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

allure {
    report {
        version.set(allureVersion)
    }
    adapter { // отвечает за появление папочки build/allure-results
        aspectjWeaver.set(true) //обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set(allureVersion) //версия интеграции фреймворка и Allure
            }
        }
    }
}

dependencies {
    testImplementation (
            "com.codeborne:selenide:6.15.0",
            "org.junit.jupiter:junit-jupiter:5.10.0",
            "com.github.javafaker:javafaker:1.0.2",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "com.codeborne:pdf-test:1.8.1",
            "com.codeborne:selenide-proxy:6.17.0",
            "com.codeborne:pdf-test:1.8.1",
            "org.hamcrest:hamcrest-library:2.2"

    )
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    useJUnitPlatform()
}

task remote_test(type: Test) {
    useJUnitPlatform {
        includeTags("remote_test")
    }
}
